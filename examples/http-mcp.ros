#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

;;;; Example MCP Server with HTTP Transport
;;;;
;;;; This file demonstrates how to create a basic MCP server
;;;; with HTTP transport and two simple tools: echo and add
;;;;
;;;; Usage:
;;;;   ./http-mcp.ros [--port PORT]
;;;;   ros http-mcp.ros [--port PORT]
;;;;
;;;; With SLYNK support for remote debugging:
;;;;   SLYNK_PORT=4005 ./http-mcp.ros
;;;;
;;;; Example client usage with curl:
;;;;   curl -X POST http://localhost:8080/mcp \
;;;;        -H "Content-Type: application/json" \
;;;;        -H "MCP-Protocol-Version: 2025-06-18" \
;;;;        -d '{"jsonrpc":"2.0","method":"echo","params":{"text":"Hello World!"},"id":1}'

(declaim (optimize (debug 3) (safety 3)))

;; Load required systems
(push "~/projects/lisp/40ants-logging/" asdf:*central-registry*)
(push "~/projects/lisp/40ants-openrpc/" asdf:*central-registry*)
(push "~/projects/lisp/openrpc/" asdf:*central-registry*)

(declaim (optimize (debug 3) (safety 3)))

(ql:quickload '(:40ants-mcp :alexandria :local-time :40ants-slynk) :silent t)

(defpackage #:example-http-mcp-server
  (:use #:cl)
  (:import-from #:40ants-mcp)
  (:import-from #:40ants-logging)
  (:import-from #:serapeum
                #:fmt)
  (:import-from #:openrpc-server)
  (:import-from #:jsonrpc/errors)
  (:import-from #:log :info)
  (:import-from #:40ants-slynk
                #:start-slynk-if-needed)
  (:import-from #:alexandria)
  (:import-from #:40ants-mcp/content/text
                #:text-content)
  (:export #:main))
(in-package #:example-http-mcp-server)


(openrpc-server:define-api (example-tools :title "Example tools"))


(openrpc-server:define-rpc-method (example-tools echo) (text)
  (:summary "Simply returns the input text back to the caller.")
  (:param text string "Text to echo back.")
  (:result (soft-list-of text-content))
  (list (make-instance 'text-content
                      :text text)))


(openrpc-server:define-rpc-method (example-tools add) (a b)
  (:summary "Adds two numbers and returns the result.")
  (:param a integer "First number to add.")
  (:param b integer "Second number to add.")
  (:result (soft-list-of text-content))
  (list (make-instance 'text-content
                      :text (format nil "The sum of ~A and ~A is: ~A"
                                  a b (+ a b)))))


(defun parse-args (argv)
  "Parse command line arguments"
  (let ((args argv)
        (port 8080))
    (loop while args
          do (cond
               ((string= (first args) "--port")
                (setf port (parse-integer (second args)))
                (setf args (cddr args)))
               (t (setf args (cdr args)))))
    port))


(defun main (&rest argv)
  "Main entry point for the Roswell script"
  (let ((port (parse-args argv)))
    (40ants-logging:setup-for-backend
     :filename (make-pathname :directory '(:absolute "tmp")
                             :name "http-mcp"
                             :type "log")
     :level :debug)

    ;; Start SLYNK server if SLYNK_PORT environment variable is set
    (start-slynk-if-needed)

    (setf jsonrpc/errors:*debug-on-error* t)

    (log:info "Starting Example MCP Server with HTTP transport on port" port)
    (log:info "Lisp: ~A ~A" (lisp-implementation-type) (lisp-implementation-version))
    (log:info "Roswell: ~A" (or (uiop:getenv "ROSWELL_VERSION") "Unknown"))
    (40ants-mcp/server/definition:start-server example-tools
                                              :transport :http
                                              :port port)))